Question: https://www.hackerrank.com/challenges/ctci-ice-cream-parlor 

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class IceCream implements Comparable{
    int flavor;
    int index;

    public IceCream(int flavor, int index) {
      this.flavor=flavor;
      this.index=index;
    }
   
    @Override
    public int compareTo(Object o) {
        IceCream obj=(IceCream) o;
       if(this.flavor > obj.flavor)
           return 1;
       else if(this.flavor == obj.flavor)
           return 0; 
       else
            return -1;
    }

    @Override
    public boolean equals(Object o){
       IceCream obj=(IceCream) o;
       if(this.flavor == obj.flavor)
           return true; 
       return false;
    }
        
}

public class Solution {
   
    public static int binarySearch(int first, int last, IceCream[] arr, int search) {
        if(last<first){
            return -1;
        }
        int mid=0;
            mid=(last+first)/2;
        //System.out.println(first+" "+mid+" "+last+" "+search);
        //System.out.println("Val"+arr[mid].flavor); 
        if(search==arr[mid].flavor){
            return arr[mid].index;
        }
        else if(search<arr[mid].flavor){
          // System.out.println(first+" "+mid+" "+last);
            return binarySearch(first,mid-1,arr,search);
        }
        else{
           // System.out.println(first+" "+mid+" "+last);
            return binarySearch(mid+1,last,arr,search);
        }        
    }

    public static void main(String[] args) {
        
        int t;
        int n, m;
 
        Scanner in = new Scanner(System.in);
        t = in.nextInt();
       for(int test = 0; test < t; test++) {       
            
            m = in.nextInt();
            n = in.nextInt(); 
            IceCream[] arr = new IceCream[n];
    
            for (int i = 0; i < n; i++)
                arr[i] = new IceCream(in.nextInt(), i + 1);
            
            Arrays.sort(arr);
           //for (int i = 0; i < n; i++)
             //  System.out.println(arr[i].flavor);
           
           // int firstIndex = 100000, secondIndex = 100000;
            
           for(int i = 0; i < n - 1 ; i++) {
                int index=-1;
                int search = m - arr[i].flavor;
                if(search >= arr[i].flavor && search <= arr[n-1].flavor) {
                    //System.out.println(arr[i].flavor+" "+search);
                    if(search == arr[n-1].flavor)
                        index=arr[n-1].index;
                    else
                        index = binarySearch( i + 1, n - 1, arr, search);
                    if( index != -1 ) {
                        System.out.println( Math.min(arr[i].index, index) + " " + Math.max(arr[i].index, index));
                        break;

                    }
                }
            } 
            
        }
        
    }
                        
}
